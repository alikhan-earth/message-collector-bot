from traceback import format_exc

from aiogram import Router, types, filters
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton

import config
from db import db

router = Router()


class StopWordsState(StatesGroup):
    user_input = State()
    delete = State()


@router.callback_query(filters.Text('stop_words'))
async def keywords(callback: types.CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ üì•', callback_data='add_stop_word'), InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üóë', callback_data='delete_stop_word')],
            [InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ üìã', callback_data='stop_word_list')],
            [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='menu')]
    ])
    await callback.message.answer('üî¥ –ú–µ–Ω—é —Å—Ç–æ–≤-—Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–∫–∞—Ç—å—Å—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.', reply_markup=markup)


@router.callback_query(filters.Text('add_stop_word'))
async def add_stop_word(callback: types.CallbackQuery, state: FSMContext):
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')]], resize_keyboard=True)
    await callback.message.answer('üî¥ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–æ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)', reply_markup=markup)
    await state.set_state(StopWordsState.user_input)


@router.message(StopWordsState.user_input)
async def user_input(message: types.Message, state: FSMContext):
    try:
        msg = '‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ'
        for stop_word in message.text.split('\n'):
            if stop_word == '‚ùå –û—Ç–º–µ–Ω–∞':
                msg = '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥.'
                break
            if stop_word in config.stop_words:
                await message.answer(f'–°—Ç–æ–ø-—Å–ª–æ–≤–æ <b>{stop_word}</b> —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.', parse_mode='html')
                continue
            config.stop_words.append(stop_word.strip().lower())
            db.create('stop_words', stop_word.strip().lower())
        await message.answer(msg, reply_markup=ReplyKeyboardRemove())
    except:
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏', reply_markup=ReplyKeyboardRemove())
        print(format_exc())
    finally:
        await state.clear()
        markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ üì•', callback_data='add_stop_word'), InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üóë', callback_data='delete_stop_word')],
                [InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ üìã', callback_data='stop_word_list')],
                [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='menu')]
        ])
        await message.answer('üî¥ –ú–µ–Ω—é —Å—Ç–æ–≤-—Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–∫–∞—Ç—å—Å—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.', reply_markup=markup)


@router.callback_query(filters.Text('stop_word_list'))
async def stop_word_list(callback: types.CallbackQuery):
    msg = 'üî¥ –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤:\n\n'

    for index, stop_word in enumerate(config.stop_words):
        msg += f'{index+1}. {stop_word}\n'
     
    if (not len(config.stop_words)):
        msg += '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.'

    await callback.message.answer(msg)


@router.callback_query(filters.Text('delete_stop_word'))
async def delete_stop_word(callback: types.CallbackQuery, state: FSMContext):
    msg = 'üóë –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)\n\n'

    for index, stop_word in enumerate(config.stop_words):
        msg += f'{index+1}. {stop_word}\n'
     
    if (not len(config.stop_words)):
        await callback.message.answer('–ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.')
        return
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')]], resize_keyboard=True)
    await callback.message.answer(msg, reply_markup=markup)
    await state.set_state(StopWordsState.delete)


@router.message(StopWordsState.delete)
async def delete(message: types.Message, state: FSMContext):
    try:
        msg = '‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ'
        values = message.text.split('\n')
        for value in values:
            if value.strip() == '‚ùå –û—Ç–º–µ–Ω–∞':
                msg = '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥.'
                break
            if value.strip() not in config.stop_words:
                await message.answer(f'–°—Ç–æ–ø-—Å–ª–æ–≤–æ <b>{value.strip()}</b> –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', parse_mode='html')
                continue
            config.stop_words.remove(value)
            db.delete('stop_words', 'word', value)
        await message.answer(msg, reply_markup=ReplyKeyboardRemove())
    except:
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏', reply_markup=ReplyKeyboardRemove())
        print(format_exc())
    finally:
        await state.clear()
        markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ üì•', callback_data='add_stop_word'), InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üóë', callback_data='delete_stop_word')],
                [InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ üìã', callback_data='stop_word_list')],
                [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='menu')]
        ])
        await message.answer('üî¥ –ú–µ–Ω—é —Å—Ç–æ–≤-—Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–∫–∞—Ç—å—Å—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.', reply_markup=markup)
