from traceback import format_exc

from aiogram import Router, types, filters
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import config
from db import db

router = Router()


class StopWordsState(StatesGroup):
    user_input = State()
    delete = State()


@router.callback_query(filters.Text('stop_words'))
async def keywords(callback: types.CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ üì•', callback_data='add_stop_word'), InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üóë', callback_data='delete_stop_word')],
            [InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ üìã', callback_data='stop_word_list')],
            [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='menu')]
    ])
    await callback.message.edit_text('üî¥ –ú–µ–Ω—é —Å—Ç–æ–≤-—Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–∫–∞—Ç—å—Å—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.')
    await callback.message.edit_reply_markup(callback.inline_message_id, markup)


@router.callback_query(filters.Text('add_stop_word'))
async def add_stop_word(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer('üî¥ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–æ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)')
    await state.set_state(StopWordsState.user_input)


@router.message(StopWordsState.user_input)
async def user_input(message: types.Message, state: FSMContext):
    try:
        for stop_word in message.text.lower().split(','):
                config.stop_words.append(stop_word.strip())
                db.create('stop_words', stop_word.strip())
        await message.answer('‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
    except:
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏')
        print(format_exc())
    finally:
        await state.clear()


@router.callback_query(filters.Text('stop_word_list'))
async def stop_word_list(callback: types.CallbackQuery):
    msg = 'üî¥ –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤:\n\n'

    for index, stop_word in enumerate(config.stop_words):
        msg += f'{index+1}. {stop_word}\n'
     
    if (not len(config.stop_words)):
        msg += '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.'

    await callback.message.answer(msg)


@router.callback_query(filters.Text('delete_stop_word'))
async def delete_stop_word(callback: types.CallbackQuery, state: FSMContext):
    msg = 'üóë –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)\n\n'

    for index, stop_word in enumerate(config.stop_words):
        msg += f'{index+1}. {stop_word}\n'
     
    if (not len(config.stop_words)):
        await callback.message.answer('–ù–µ—Ç —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.')
        return

    await callback.message.answer(msg)
    await state.set_state(StopWordsState.delete)


@router.message(StopWordsState.delete)
async def delete(message: types.Message, state: FSMContext):
    try:
        values = [config.stop_words[int(index)-1] for index in message.text.split(',')]
        for value in values:
            config.stop_words.remove(value)
            db.delete('stop_words', 'word', value)
        await message.answer('‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ')
    except:
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏')
        print(format_exc())
    finally:
        await state.clear()
