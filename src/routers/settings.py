from aiogram import Router, types, filters
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.state import State, StatesGroup

import config

router = Router()


def _get_settings_text():
    format_txt = """<a href="{0}">{1}</a>"""
    return f"""‚öôÔ∏è –ü–µ—Ä–µ—à–ª–∏ –∫ –≥–ª–∞–≤–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –±–æ—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:\n\n–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {'üü¢ –û–Ω–ª–∞–π–Ω' if config.bot_enabled else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω'}\n–§–∏–ª—å—Ç—Ä –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {'üü¢ –í–∫–ª—é—á–µ–Ω' if config.duplicate_filter else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω'}\n\n–ß–∞—Ç—ã –¥–ª—è –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∫–∏: {', '.join(map(lambda chat: format_txt.format('http://t.me/' + chat if 'joinchat' and chat[chat.rindex('/')+1] != '+' not in chat else chat, chat), config.chats)) if len(config.chats) else '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç'}\n–†–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏: {'–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å —Å—Å—ã–ª–∫–æ–π' if config.send_mode == 'forwarding' else '–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ'}"""


def _get_settings_kb():
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–û—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ ü§ñ' if config.bot_enabled else '–í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ ü§ñ', callback_data='bot')],
        [InlineKeyboardButton(text='–û—Ç–∫–ª—é—á–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã üîÅ' if config.duplicate_filter else '–í–∫–ª—é—á–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã ‚ñ∂Ô∏è', callback_data='duplicates')],
        [InlineKeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Ç—ã üì©', callback_data='chats_settings')],
        [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='menu')]
    ])
    return markup


def _get_chats_settings_kb():
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=('‚úÖ' if config.send_mode=='copy' else '') + '–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data='copy'), InlineKeyboardButton(text=('‚úÖ' if config.send_mode=='forwarding' else '') + '–ü–µ—Ä–µ—Å—ã–ª–∫–∞', callback_data='forwarding')],
        [InlineKeyboardButton(text='–£–∫–∞–∑–∞—Ç—å —á–∞—Ç—ã üì©', callback_data='chats')],
        [InlineKeyboardButton(text='‚óÄÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data='settings')]
    ])
    return markup


@router.callback_query(filters.Text('settings'))
async def settings(callback: types.CallbackQuery):
    message = _get_settings_text()
    markup = _get_settings_kb()

    await callback.message.answer(message, parse_mode='html', reply_markup=markup, disable_web_page_preview=True)


@router.callback_query(filters.Text('duplicates'))
async def duplicates(callback: types.CallbackQuery):
    config.duplicate_filter = not config.duplicate_filter
    message = _get_settings_text()
    markup = _get_settings_kb()

    await callback.message.answer(message, parse_mode='html', reply_markup=markup, disable_web_page_preview=True)


@router.callback_query(filters.Text('bot'))
async def bot(callback: types.CallbackQuery):
    config.bot_enabled = not config.bot_enabled
    message = _get_settings_text()
    markup = _get_settings_kb()

    await callback.message.answer(message, parse_mode='html', reply_markup=markup, disable_web_page_preview=True)


@router.callback_query(filters.Text('chats_settings'))
async def chats_settings(callback: types.CallbackQuery):
    await callback.message.answer(_get_settings_text(), parse_mode='html', reply_markup=_get_chats_settings_kb(), disable_web_page_preview=True)


@router.callback_query(filters.Text('copy'))
async def chats_settings(callback: types.CallbackQuery):
    config.send_mode = 'copy'
    await callback.message.answer(_get_settings_text(), parse_mode='html', reply_markup=_get_chats_settings_kb(), disable_web_page_preview=True)


@router.callback_query(filters.Text('forwarding'))
async def chats_settings(callback: types.CallbackQuery):
    config.send_mode = 'forwarding'
    await callback.message.answer(_get_settings_text(), parse_mode='html', reply_markup=_get_chats_settings_kb(), disable_web_page_preview=True)
