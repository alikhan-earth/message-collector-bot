from traceback import format_exc

from aiogram import Router, types, filters
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

import config
from db import db

router = Router()


class MonitoringChatsState(StatesGroup):
    user_input = State()
    delete = State()


@router.callback_query(filters.Text('monitoring_chats'))
async def keywords(callback: types.CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç üì•', callback_data='add_monitoring_chat'), InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —á–∞—Ç üóë', callback_data='delete_monitoring_chat')],
            [InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ üìã', callback_data='monitoring_chat_list')],
            [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='menu')]
    ])
    await callback.message.answer('üóÇÔ∏è –ú–µ–Ω—é —á–∞—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.', reply_markup=markup)


@router.callback_query(filters.Text('add_monitoring_chat'))
async def add_monitoring_chat(callback: types.CallbackQuery, state: FSMContext):
    reply_markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')]], resize_keyboard=True)
    await callback.message.answer('üóÇÔ∏è –£–∫–∞–∂–∏—Ç–µ —á–∞—Ç—ã (—Å—Å—ã–ª–∫–∞ –∏–ª–∏ ID).', reply_markup=reply_markup)
    await state.set_state(MonitoringChatsState.user_input)


@router.message(MonitoringChatsState.user_input)
async def user_input(message: types.Message, state: FSMContext):
    try:
        msg = '‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ'
        for monitoring_chat in map(lambda chat: chat.replace('http://t.me', '').replace('https://t.me', '').replace('/', '').replace('@', '').strip(), message.text.split('\n')):
            if monitoring_chat.strip() == '‚ùå –û—Ç–º–µ–Ω–∞':
                msg = '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥'
                break
            if monitoring_chat.strip() in config.monitoring_chats:
                await message.answer(f'–ß–∞—Ç <a href="http://t.me/{monitoring_chat}"><b>{monitoring_chat.strip()}</b></a> —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.', parse_mode='html')
                continue
            config.monitoring_chats.append(monitoring_chat.replace('http://t.me', '').replace('https://t.me', '').replace('/', '').replace('@', '').strip())
            db.create('monitoring_chats', monitoring_chat.replace('http://t.me', '').replace('https://t.me', '').replace('/', '').replace('@', '').strip())
        await message.answer(msg, parse_mode='html', reply_markup=ReplyKeyboardRemove())
    except:
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏', reply_markup=ReplyKeyboardRemove())
        print(format_exc())
    finally:
        await state.clear()
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç üì•', callback_data='add_monitoring_chat'), InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —á–∞—Ç üóë', callback_data='delete_monitoring_chat')],
            [InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ üìã', callback_data='monitoring_chat_list')],
            [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='menu')]
        ])
        await message.answer('üóÇÔ∏è –ú–µ–Ω—é —á–∞—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.', reply_markup=markup)


@router.callback_query(filters.Text('monitoring_chat_list'))
async def monitoring_chat_list(callback: types.CallbackQuery):
    msg = 'üóÇÔ∏è –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n\n'

    for index, monitoring_chat in enumerate(config.monitoring_chats):
        msg += f"""{index+1}. <a href="http://t.me/{monitoring_chat}">{monitoring_chat}</a>\n"""
     
    if (not len(config.monitoring_chats)):
        msg += '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.'

    await callback.message.answer(msg, 'html', disable_web_page_preview=True)


@router.callback_query(filters.Text('delete_monitoring_chat'))
async def delete_monitoring_chat(callback: types.CallbackQuery, state: FSMContext):
    msg = 'üóë –£–∫–∞–∂–∏—Ç–µ —á–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å\n\n'

    for index, monitoring_chat in enumerate(config.monitoring_chats):
        msg += f"""{index+1}. <a href="http://t.me/{monitoring_chat}">{monitoring_chat}</a>\n"""
     
    if (not len(config.monitoring_chats)):
        await callback.message.answer('–ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.')
        return
    markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')]], resize_keyboard=True)
    await callback.message.answer(msg, 'html', disable_web_page_preview=True, reply_markup=markup)
    await state.set_state(MonitoringChatsState.delete)


@router.message(MonitoringChatsState.delete)
async def delete(message: types.Message, state: FSMContext):
    msg = '‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ'
    try:
        values = map(lambda chat: chat.replace('http://t.me', '').replace('https://t.me', '').replace('/', '').replace('@', '').strip(), message.text.split('\n'))
        for value in values:
            if value.strip() == '‚ùå –û—Ç–º–µ–Ω–∞':
                msg = '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥.'
                break
            if value.strip() not in config.monitoring_chats:
                await message.answer(f'–ß–∞—Ç <a href="http://t.me/{value.strip()}"><b>{value.strip()}</b></a> –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', parse_mode='html')
                continue
            config.monitoring_chats.remove(value)
            db.delete('monitoring_chats', 'chat_id', value)
    except:
        msg = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏'
        print(format_exc())
    finally:
        await message.answer(msg, reply_markup=ReplyKeyboardRemove())
        await state.clear()
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç üì•', callback_data='add_monitoring_chat'), InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —á–∞—Ç üóë', callback_data='delete_monitoring_chat')],
            [InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ üìã', callback_data='monitoring_chat_list')],
            [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='menu')]
        ])
        await message.answer('üóÇÔ∏è –ú–µ–Ω—é —á–∞—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.', reply_markup=markup)
