from traceback import format_exc

from aiogram import Router, types, filters
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton

import config
from db import db

router = Router()


class BlackListState(StatesGroup):
    user_input = State()
    delete = State()


@router.callback_query(filters.Text('black_list'))
async def blacklist(callback: types.CallbackQuery):
    markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üì•', callback_data='add_black_list'), InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üóë', callback_data='delete_black_list')],
            [InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üìã', callback_data='black_list_list')],
            [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='menu')]
    ])
    await callback.message.answer('üö∑ –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.', reply_markup=markup)


@router.callback_query(filters.Text('add_black_list'))
async def add_black_list(callback: types.CallbackQuery, state: FSMContext):
    reply_markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')]], resize_keyboard=True)
    await callback.message.answer('üö∑ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Å—ã–ª–∫–∞ –∏–ª–∏ ID).\n–ú–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.', reply_markup=reply_markup)
    await state.set_state(BlackListState.user_input)


@router.message(BlackListState.user_input)
async def user_input(message: types.Message, state: FSMContext):
    try:
        msg = '‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ'
        for user_id in map(lambda user_id: user_id.replace('http://t.me', '').replace('https://t.me', '').replace('/', '').replace('@', '').strip(), message.text.split('\n')):
            if user_id.strip() == '‚ùå –û—Ç–º–µ–Ω–∞':
                msg = '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥'
                break
            if user_id.strip() in config.monitoring_chats:
                await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="http://t.me/{user_id}"><b>{user_id.strip()}</b></a> —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ß–°.', parse_mode='html')
                continue
            config.black_list.append(user_id)
            db.create('black_list', user_id)
        await message.answer(msg, reply_markup=ReplyKeyboardRemove())
    except:
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏', reply_markup=ReplyKeyboardRemove())
        print(format_exc())
    finally:
        await state.clear()
        markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üì•', callback_data='add_black_list'), InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üóë', callback_data='delete_black_list')],
                [InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üìã', callback_data='black_list_list')],
                [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='menu')]
        ])
        await message.answer('üö∑ –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.', reply_markup=markup)


@router.callback_query(filters.Text('black_list_list'))
async def black_list_list(callback: types.CallbackQuery):
    msgs = ['üö∑ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:\n\n']

    for index, user_id in enumerate(config.black_list):
        if len(msgs[-1]) < 2250:
            msgs[-1] += f"""{index+1}. <a href="http://t.me/{user_id}">{user_id}</a>\n"""
        else:
            msgs.append('')
            msgs[-1] += f"""{index+1}. <a href="http://t.me/{user_id}">{user_id}</a>\n"""
     
    if (not len(config.black_list)):
        msgs[-1] += '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.'

    for msg in msgs:
        await callback.message.answer(msg, 'html', disable_web_page_preview=True)


@router.callback_query(filters.Text('delete_black_list'))
async def delete_key_word(callback: types.CallbackQuery, state: FSMContext):
    msgs = ['üóë –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)\n\n']

    for index, user_id in enumerate(config.black_list):
        if len(msgs[-1]) < 2250:
            msgs[-1] += f"""{index+1}. <a href="http://t.me/{user_id}">{user_id}</a>\n"""
        else:
            msgs.append('')
            msgs[-1] += f"""{index+1}. <a href="http://t.me/{user_id}">{user_id}</a>\n"""
     
    if (not len(config.black_list)):
        await callback.message.answer('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.')
        return
    reply_markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')]], resize_keyboard=True)
    for msg in msgs:
        await callback.message.answer(msg, 'html', disable_web_page_preview=True, reply_markup=reply_markup)
    await state.set_state(BlackListState.delete)


@router.message(BlackListState.delete)
async def delete(message: types.Message, state: FSMContext):
    try:
        msg = '‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ'
        values = map(lambda user_id: user_id.replace('http://t.me', '').replace('https://t.me', '').replace('/', '').replace('@', '').strip(), message.text.split('\n'))
        for value in values:
            if value.strip() == '‚ùå –û—Ç–º–µ–Ω–∞':
                msg = '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥'
                break
            if value.strip() not in config.black_list:
                await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="http://t.me/{value}"><b>{value.strip()}</b></a> –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç –≤ –ß–°.', parse_mode='html')
                continue
            config.black_list.remove(value)
            db.delete('black_list', 'user_id', value)
        await message.answer(msg, reply_markup=ReplyKeyboardRemove())
    except:
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏', reply_markup=ReplyKeyboardRemove())
        print(format_exc())
    finally:
        await state.clear()
        markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üì•', callback_data='add_black_list'), InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üóë', callback_data='delete_black_list')],
                [InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üìã', callback_data='black_list_list')],
                [InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='menu')]
        ])
        await message.answer('üö∑ –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.', reply_markup=markup)
